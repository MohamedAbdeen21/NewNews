# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html


# useful for handling different item types with a single interface
from itemadapter import ItemAdapter

import psycopg2 as pg

class XmlscraperPipeline:

    def open_spider(self,spider):
        self.con = pg.connect("host=localhost dbname=newsscraper port=5432 user=spiders password=12345678")
        self.cur = self.con.cursor()
        # The schema
        #self.cur.execute('''CREATE TABLE IF NOT EXISTS articles(
        #        sk SERIAL,
        #        url TEXT,
        #        title TEXT,
        #        text TEXT,
        #        count INT DEFAULT -1,
        #        date DATE DEFAULT CURRENT_DATE,
        #        CONSTRAINT unique_url UNIQUE (url),
        #        CONSTRAINT unique_sk UNIQUE (sk)
        #        )
        #        ''')
        #self.cur.execute('''CREATE TABLE IF NOT EXISTS users(
        #    id INT GENERATED BY DEFAULT AS IDENTITY UNIQUE,
        #    some_feature TEXT)
        #    ''')
        #self.cur.execute('''CREATE TABLE IF NOT EXISTS users_articles(
        #    user_id INT,
        #    article_id INT,
        #    PRIMARY KEY (user_id,article_id),
        #    FOREIGN KEY (user_id) REFERENCES users(id),
        #    FOREIGN KEY (article_id) REFERENCES articles(sk)
        #    )''')
        #self.con.commit()

    def process_item(self, item, spider):
        try:
            self.cur.execute("""INSERT INTO articles(url,title,text,count,date,tags) VALUES(%s,%s,%s,%s,%s,%s)""",
                        [item['url'],item['title'],item['text'],item['count'],item['date'],item['tags']])
            self.con.commit()
            print('Added article')
        except KeyError as exception:
            print('Item {} had no key {}'.format(item['url'], repr(exception)))
        except pg.IntegrityError as exception:
            self.cur.execute("ROLLBACK")
            self.con.commit()
            print('Pipeline raised a {}'.format(repr(exception)))
        return item

    def close_spider(self,spider):
        self.con.close()